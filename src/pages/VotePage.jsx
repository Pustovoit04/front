import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import CategoryList from '../components/CategoryList';
import CandidateList from '../components/CandidateList';
import VoteStats from '../components/VoteStats';
import {
  fetchCategories,
  fetchCandidatesByCategory,
  submitVote,
  checkIfVoted,
  fetchStats,
  fetchTopCandidate,
  fetchBottomCandidate,
  fetchRandomCategory,
} from '../api/voteApi';
import './VotePage.css';
import { useAuth } from '../context/AuthContext';

function VotePage() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  const [categories, setCategories] = useState([]);
  const [candidates, setCandidates] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [hasVoted, setHasVoted] = useState(false);
  const [stats, setStats] = useState(null);
  const [topCandidate, setTopCandidate] = useState(null);
  const [bottomCandidate, setBottomCandidate] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        const [categoriesData, statsData, topData, bottomData] = await Promise.all([
          fetchCategories(),
          fetchStats(),
          fetchTopCandidate(),
          fetchBottomCandidate(),
        ]);
        setCategories(categoriesData);
        setStats(statsData);
        setTopCandidate(topData);
        setBottomCandidate(bottomData);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ');
      } finally {
        setLoading(false);
      }
    };
    loadData();
  }, []);

  const handleCategorySelect = async (category) => {
    setSelectedCategory(category);
    try {
      const candidatesData = await fetchCandidatesByCategory(category.id);
      setCandidates(candidatesData);
      if (user) {
        const voted = await checkIfVoted(category.id);
        setHasVoted(voted);
      } else {
        setHasVoted(false);
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤:', error);
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤');
    }
  };

  const handleVote = async (candidateId) => {
    if (!user) {
      navigate('/login');
      return;
    }
    if (hasVoted) {
      alert('–í–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó!');
      return;
    }
    try {
      await submitVote(selectedCategory.id, candidateId);
      setHasVoted(true);
      alert('–ì–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!');
      const [statsData, topData, bottomData] = await Promise.all([
        fetchStats(),
        fetchTopCandidate(),
        fetchBottomCandidate(),
      ]);
      setStats(statsData);
      setTopCandidate(topData);
      setBottomCandidate(bottomData);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:', error);
      alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–æ–ª–æ—Å: ' + error.message);
    }
  };

  const handleRandomCategory = async () => {
    if (categories.length === 0) return;
    try {
      const randomCategory = await fetchRandomCategory();
      handleCategorySelect(randomCategory);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:', error);
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–±—Ä–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é');
    }
  };

  const handleLogout = async () => {
    try {
      await logout();
      navigate('/login');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É:', error);
      alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–π—Ç–∏ –∑ —Å–∏—Å—Ç–µ–º–∏');
    }
  };

  if (loading) return <div>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;
  if (error) return <div>–ü–æ–º–∏–ª–∫–∞: {error}</div>;

  return (
    <div className="vote-container">
      <h1>–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è</h1>
      {user ? (
        <>
          <p>
            –í—ñ—Ç–∞—î–º–æ, {user.name}!
            <button className="logout-button" onClick={handleLogout}>
              –í–∏–π—Ç–∏
            </button>
          </p>
          <button onClick={handleRandomCategory}>üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è</button>
          <button onClick={() => navigate('/new-category')}>‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π</button>
          <CategoryList
            categories={categories}
            selected={selectedCategory}
            onSelect={handleCategorySelect}
          />
          {selectedCategory && (
            <CandidateList
              candidates={candidates}
              categoryName={selectedCategory.name}
              onVote={handleVote}
              hasVoted={hasVoted}
            />
          )}
          <VoteStats stats={stats} topCandidate={topCandidate} bottomCandidate={bottomCandidate} />
        </>
      ) : (
        <div>
          <p>–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏.</p>
          <button onClick={() => navigate('/login')}>–£–≤—ñ–π—Ç–∏</button>
        </div>
      )}
    </div>
  );
}

export default VotePage;