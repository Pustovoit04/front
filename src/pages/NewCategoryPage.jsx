import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import {
  fetchCategories,
  fetchCandidatesByCategory,
  createCategory,
  updateCategory,
  createCandidate,
  deleteCategory,
  deleteCandidate,
} from '../api/voteApi';
import './NewCategoryPage.css';

function NewCategoryPage() {
  const navigate = useNavigate();
  const { user } = useAuth();

  const [categories, setCategories] = useState([]);
  const [candidates, setCandidates] = useState([]);
  const [selectedCatId, setSelectedCatId] = useState('');
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newName, setNewName] = useState('');
  const [newCandidateName, setNewCandidateName] = useState('');
  const [selectedCandidateToDelete, setSelectedCandidateToDelete] = useState('');
  const [error, setError] = useState(null);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (!user) {
      navigate('/login');
      return;
    }
    fetchCategories()
      .then(setCategories)
      .catch(() => setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'));
  }, [user, navigate]);

  // –ü—Ä–∏ –∑–º—ñ–Ω—ñ –≤–∏–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤
  useEffect(() => {
    if (!selectedCatId) {
      setCandidates([]);
      return;
    }
    fetchCandidatesByCategory(selectedCatId)
      .then(setCandidates)
      .catch(() => setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤'));
  }, [selectedCatId]);

  // –ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
  const handleCreate = async () => {
    if (!user) {
      navigate('/login');
      return;
    }
    if (!newCategoryName.trim()) {
      setError('–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é');
      return;
    }
    try {
      await createCategory({ name: newCategoryName });
      setNewCategoryName('');
      setError(null);
      const updatedCategories = await fetchCategories();
      setCategories(updatedCategories);
    } catch {
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é');
    }
  };

  // –ü—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
  const handleRename = async () => {
    if (!user) {
      navigate('/login');
      return;
    }
    if (!selectedCatId || !newName.trim()) {
      setError('–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É');
      return;
    }
    try {
      await updateCategory(selectedCatId, { name: newName });
      setNewName('');
      setError(null);
      const updatedCategories = await fetchCategories();
      setCategories(updatedCategories);
    } catch {
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó');
    }
  };

  // –ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤
  const handleAddCandidate = async () => {
    if (!user) {
      navigate('/login');
      return;
    }
    if (!selectedCatId || !newCandidateName.trim()) {
      setError('–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
      return;
    }
    try {
      await createCandidate(selectedCatId, { name: newCandidateName });
      setNewCandidateName('');
      setError(null);
      const updatedCandidates = await fetchCandidatesByCategory(selectedCatId);
      setCandidates(updatedCandidates);
    } catch {
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
    }
  };

  // –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
  const handleDelete = async () => {
    if (!user) {
      navigate('/login');
      return;
    }
    if (!selectedCatId) {
      setError('–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
      return;
    }
    try {
      await deleteCategory(selectedCatId);
      setSelectedCatId('');
      setError(null);
      const updatedCategories = await fetchCategories();
      setCategories(updatedCategories);
      setCandidates([]);
    } catch {
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é');
    }
  };

  // –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤
  const handleDeleteCandidate = async () => {
    if (!user) {
      navigate('/login');
      return;
    }
    if (!selectedCatId || !selectedCandidateToDelete) {
      setError('–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
      return;
    }
    try {
      await deleteCandidate(selectedCatId, selectedCandidateToDelete);
      setSelectedCandidateToDelete('');
      setError(null);
      const updatedCandidates = await fetchCandidatesByCategory(selectedCatId);
      setCandidates(updatedCandidates);
    } catch {
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
    }
  };

  if (!user) {
    navigate('/login');
    return null;
  }

  return (
    <div className="category-settings-container">
      <h2>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π</h2>
      <button className="back-button" onClick={() => navigate('/')}>‚¨ÖÔ∏è –ù–∞–∑–∞–¥</button>

      <div className="section">
        <h3>–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é</h3>
        <input
          type="text"
          placeholder="–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
          value={newCategoryName}
          onChange={(e) => setNewCategoryName(e.target.value)}
        />
        <button onClick={handleCreate}>‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏</button>
      </div>

      <div className="section">
        <h3>–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é</h3>
        <select value={selectedCatId} onChange={(e) => setSelectedCatId(e.target.value)}>
          <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é --</option>
          {categories.map(cat => (
            <option key={cat.id} value={cat.id}>{cat.name}</option>
          ))}
        </select>
      </div>

      {selectedCatId && (
        <>
          <div className="section">
            <h3>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</h3>
            <input
              type="text"
              placeholder="–ù–æ–≤–∞ –Ω–∞–∑–≤–∞"
              value={newName}
              onChange={(e) => setNewName(e.target.value)}
            />
            <button onClick={handleRename}>‚úèÔ∏è –ó–±–µ—Ä–µ–≥—Ç–∏</button>
          </div>

          <div className="section">
            <h3>–î–æ–¥–∞—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</h3>
            <input
              type="text"
              placeholder="–Ü–º'—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
              value={newCandidateName}
              onChange={(e) => setNewCandidateName(e.target.value)}
            />
            <button onClick={handleAddCandidate}>‚ûï –î–æ–¥–∞—Ç–∏</button>
          </div>

          <div className="section">
            <h3>–Ü—Å–Ω—É—é—á—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç–∏</h3>
            <ul>
              {candidates.map(c => (
                <li key={c.id}>{c.name}</li>
              ))}
            </ul>
            <select
              value={selectedCandidateToDelete}
              onChange={(e) => setSelectedCandidateToDelete(e.target.value)}
            >
              <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ --</option>
              {candidates.map(c => (
                <option key={c.id} value={c.id}>{c.name}</option>
              ))}
            </select>
            <button onClick={handleDeleteCandidate}>üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
          </div>

          <div className="section">
            <button onClick={handleDelete}>‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é</button>
          </div>
        </>
      )}

      {error && <p style={{ color: 'red' }}>{error}</p>}
    </div>
  );
}

export default NewCategoryPage;
